# -*- coding: utf-8 -*-
"""image_classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_rOmtNMhhZ0cyOSOIccphR9QsGtV7ikL
"""

# Commented out IPython magic to ensure Python compatibility.
# importing dependencies
import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
# %matplotlib inline

# using pandas to read the database in the same folder
df = pd.read_csv('/content/drive/MyDrive/mnist_train.csv')

df.head()

# extracting data from dataset and viewing them up close
a = df.iloc[3, 1:]
a

type(a)

# reshaping data extracted into resonable size
a = a.values.reshape(28,28).astype('uint8')
a

plt.imshow(a)

b = df.iloc[2, 1:]
b

b = b.values.reshape(28, 28).astype('uint8')
b

plt.imshow(b)

c = df.iloc[4,1:]
c

c = c.values.reshape(28, 28).astype('uint8')
c

plt.imshow(c)

# prepating data, seperating labels from pixels values
df_x = df.iloc[:, 1:]
df_y = df.iloc[:, 0]

# practicing ilioc on df
df.iloc[:, 450]





df_x

df_y

# creating test and train data
x_train, x_test, y_train, y_test = train_test_split(df_x, df_y, test_size = 0.2, random_state = 4)



# calling rf classifier
rf = RandomForestClassifier(n_estimators=100)

rf.fit(x_train, y_train)

# prediction of model
pred = rf.predict(x_test)

# array showing the model prediction based on the input x_test
pred

# output we require
y_test

# checking whether output of the model is matching the actual value
pred == y_test

# checking model accuracy

s = y_test.values

# calculate number of correctly predicted values
count = 0
for i in range(len(pred)):
  if s[i] == pred[i]:
    count += 1

count

len(pred)

# the accuracy in percentage
model_accuracy = (count / (len(pred))) *100
model_accuracy