# -*- coding: utf-8 -*-
"""iris_ML_algorithms.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hhbFtmQxOE_xSs12HxZRbkaOX5xKPqBM
"""

import sys
print('Python {}'.format(sys.version))
import scipy
print('Scipy {}'.format(scipy.__version__))
import numpy as np
import matplotlib
import pandas as pd
import sklearn

import pandas as pd
from pandas.plotting import scatter_matrix
from matplotlib import pyplot
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn import model_selection
from sklearn.ensemble import VotingClassifier
from sklearn.model_selection import StratifiedGroupKFold

df = pd.read_csv('/content/drive/MyDrive/iris.csv')

df.head()

df.columns

# dimension of the data
df.shape

df['species'].unique()

# statistical summary
df.describe()

# class distribution
df.groupby('species').size()

# univariate plots and whisker plots
df.plot(kind='box', subplots=True, layout=(2,2), sharex=False, sharey=False)

# histogram
df.hist()

# multivariate plots
scatter_matrix(df)

# creating a validation data set, ie train test split
df_x = df.iloc[:, :4]
df_y = df.iloc[:, 4]

df_x

df_y

x_train, x_test, y_train, y_test = train_test_split(df_x, df_y, test_size=0.2, random_state=1)

## Linear
  # Logistic Regression
  # Linear Discriminant Analysis
## Non Linear
  # K-Nearest neighbors
  # Classification and Regression Trees
  # Gaussian Naive Bayes
  # Support Vector Machines

#building models
models = []
models.append(('LR', LogisticRegression (solver='liblinear', multi_class='ovr')))
models.append(('LDA', LinearDiscriminantAnalysis()))
models.append(('KNN', KNeighborsClassifier()))
models.append(('NB', GaussianNB()))
models.append(('SVM', SVC (gamma='auto')))

# evaluate the created models
results = []
names = []
for name, model in models:
  kfold = StratifiedKFold(n_splits = 10)
  cv_results = cross_val_score (model, x_train, y_train, cv=kfold, scoring='accuracy')
  results.append(cv_results)
  names.append(name)
  print('%s %f (%f)' %(name, cv_results.mean(), cv_results.std()))

model = SVC(gamma='auto')
model.fit (x_train, y_train)
predictions = model.predict(x_test)

# evaluate our predictions
print (accuracy_score(y_test, predictions))
print(confusion_matrix(y_test, predictions))
print(classification_report(y_test, predictions))







